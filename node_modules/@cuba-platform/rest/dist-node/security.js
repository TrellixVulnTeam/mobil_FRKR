"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// noinspection JSUnusedGlobalSymbols
/**
 *
 * Define which type of attribute render allowed for user
 *
 * @param entityName CUBA model entity
 * @param attributeName
 * @param perms - user effective permissions
 * @return attribute could be not allowed to display (DENY), allowed for modification (MODIFY)
 * or allowed in read only mode (VIEW).
 */
function getAttributePermission(entityName, attributeName, perms) {
    if (!perms)
        return 'DENY';
    var entityAttributes = perms.explicitPermissions.entityAttributes;
    // find strict perm match 'car:engine'
    var explicitPerm = entityAttributes.find(function (perm) { return perm.target === entityName + ":" + attributeName; });
    if (explicitPerm != null)
        return convertAttributePermValue(explicitPerm.value);
    // find attribute wildcard perm match 'car:*'
    explicitPerm = entityAttributes.find(function (perm) { return perm.target === entityName + ":*"; });
    if (explicitPerm != null)
        return convertAttributePermValue(explicitPerm.value);
    // find pure wildcard perm match '*:*'
    explicitPerm = entityAttributes.find(function (perm) { return perm.target === "*:*"; });
    if (explicitPerm != null)
        return convertAttributePermValue(explicitPerm.value);
    return perms.undefinedPermissionPolicy === 'ALLOW' ? 'MODIFY' : 'DENY';
}
exports.getAttributePermission = getAttributePermission;
// noinspection JSUnusedGlobalSymbols
/**
 * Define if operation (one of CRUD) on entity allowed or not for user
 *
 * @param entityName CUBA model entity
 * @param operation - operation to be checked (CRUD)
 * @param perms - user effective permissions
 */
function isOperationAllowed(entityName, operation, perms) {
    if (!perms)
        return false;
    var entities = perms.explicitPermissions.entities;
    // find strict perm match 'car:read'
    var explicitPerm = entities.find(function (perm) { return perm.target === entityName + ":" + operation; });
    if (explicitPerm != null)
        return explicitPerm.value === 1;
    // find operation wildcard perm match 'car:*'
    explicitPerm = entities.find(function (perm) { return perm.target === entityName + ":*"; });
    if (explicitPerm != null)
        return explicitPerm.value === 1;
    // find entity wildcard perm match '*:read'
    explicitPerm = entities.find(function (perm) { return perm.target === "*:" + operation; });
    if (explicitPerm != null)
        return explicitPerm.value === 1;
    // find pure wildcard perm match '*:*'
    explicitPerm = entities.find(function (perm) { return perm.target === "*:*"; });
    if (explicitPerm != null)
        return explicitPerm.value === 1;
    return perms.undefinedPermissionPolicy === 'ALLOW';
}
exports.isOperationAllowed = isOperationAllowed;
function isSpecificPermissionGranted(permTarget, perms) {
    if (perms == null) {
        return false;
    }
    var wildcardPermValue;
    for (var _i = 0, _a = perms.explicitPermissions.specific; _i < _a.length; _i++) {
        var perm = _a[_i];
        if (perm.target === permTarget) {
            return perm.value === 1;
        }
        if (perm.target === '*') {
            wildcardPermValue = perm.value;
        }
    }
    if (wildcardPermValue != null) {
        return wildcardPermValue === 1;
    }
    return perms.undefinedPermissionPolicy === 'ALLOW';
}
exports.isSpecificPermissionGranted = isSpecificPermissionGranted;
function convertAttributePermValue(val) {
    switch (val) {
        case 2: return 'MODIFY';
        case 1: return 'VIEW';
        default: return 'DENY';
    }
}
//# sourceMappingURL=security.js.map