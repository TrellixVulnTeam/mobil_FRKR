import { EntityMessages, EnumInfo, MetaClassInfo, MetaPropertyInfo } from "@cuba-platform/rest";
export declare function getPropertyInfo(metadata: MetaClassInfo[], entityName: string, propertyName: string): MetaPropertyInfo | null;
/**
 * A non-nullable version of {@link getPropertyInfo}
 *
 * @param propertyName
 * @param entityName
 * @param metadata
 *
 * @throws `Error` when `propertyInfo` is `null`
 */
export declare function getPropertyInfoNN(propertyName: string, entityName: string, metadata: MetaClassInfo[]): MetaPropertyInfo;
export declare function getEnumCaption(enumValueName: string, propertyInfo: MetaPropertyInfo, enums: EnumInfo[]): string | undefined;
/**
 *
 * @param propertyName
 * @param entityName
 * @param messages
 *
 * @returns localized entity property caption
 */
export declare function getPropertyCaption(propertyName: string, entityName: string, messages: EntityMessages): string;
export declare function isFileProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isDateProperty({ type }: MetaPropertyInfo): boolean;
export declare function isLocalDateProperty({ type }: MetaPropertyInfo): boolean;
export declare function isTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isLocalTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isOffsetTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isDateTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isLocalDateTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isOffsetDateTimeProperty({ type }: MetaPropertyInfo): boolean;
export declare function isAnyDateProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isAnyTimeProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isAnyDateTimeProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isTemporalProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isByteArray({ attributeType, type }: MetaPropertyInfo): boolean;
export declare function isRelationProperty(propertyInfo: MetaPropertyInfo): boolean;
export declare function isOneToOneRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isOneToManyRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isManyToOneRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isManyToManyRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isToOneRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isToManyRelation({ cardinality }: MetaPropertyInfo): boolean;
export declare function isAssociation({ attributeType }: MetaPropertyInfo): boolean;
export declare function isToOneAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isToManyAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isOneToOneAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isOneToManyAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isManyToOneAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isManyToManyAssociation(propertyInfo: MetaPropertyInfo): boolean;
export declare function isComposition({ attributeType }: MetaPropertyInfo): boolean;
export declare function isOneToOneComposition(propertyInfo: MetaPropertyInfo): boolean;
export declare function isOneToManyComposition(propertyInfo: MetaPropertyInfo): boolean;
export declare type WithId = {
    id?: string;
};
export declare type WithName = {
    name?: string;
};
