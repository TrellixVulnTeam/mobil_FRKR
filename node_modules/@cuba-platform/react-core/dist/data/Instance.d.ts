import { SerializedEntityProps, MetaClassInfo, CommitMode } from "@cuba-platform/rest";
import { IReactComponent } from "mobx-react";
import * as React from "react";
import { DataContainer, DataContainerError, DataContainerStatus } from "./DataContext";
import { MainStore } from "../app/MainStore";
import { WithId } from "../util/metadata";
/**
 * Retrieves an entity instance using Generic REST API.
 *
 * @typeparam T - entity type.
 */
export declare class DataInstanceStore<T> implements DataContainer {
    private mainStore;
    readonly entityName: string;
    /**
     * Retrieved entity instance.
     */
    item?: T & Partial<SerializedEntityProps> & WithId;
    /**
     * @inheritDoc
     */
    status: DataContainerStatus;
    /**
     * @inheritDoc
     */
    lastError?: DataContainerError;
    /**
     * Name of the view used to limit the entity graph.
     */
    viewName: string;
    /**
     * Name of the ID attribute of a String ID entity.
     * Mandatory for String ID entities, shall be omitted otherwise.
     */
    stringIdName?: string;
    /**
     * @inheritDoc
     */
    changedItems: import("mobx").IObservableArray<never>;
    constructor(mainStore: MainStore, entityName: string, viewName?: string, stringIdName?: string);
    /**
     * Retrieves an entity instance using the given id and view by sending a request to the REST API.
     *
     * @param id - id of an entity instance to be retrieved.
     */
    load: (id: string) => void;
    /**
     * Sets the {@link item} to the provided value. Changes {@link status} to `DONE`.
     *
     * @param item - entity instance to be set as the {@link item}.
     */
    setItem(item: this["item"]): void;
    /**
     * Sets the {@link item} based on provided values of Ant Design {@link https://3x.ant.design/components/form/ | Form} fields.
     *
     * @param formFields - a object representing the values of Ant Design {@link https://3x.ant.design/components/form/ | Form} fields.
     */
    setItemToFormFields(formFields: Partial<T>): void;
    /**
     * Updates the {@link item} using a provided `entityPatch`, then sends a request to the REST API to persist the changes.
     *
     * @param entityPatch - a `Partial` representing the changes to be made.
     * @param commitMode - 'create' when creating a new entity or 'edit' when editing an existing one.
     * Different REST API endpoints and HTTP methods will be used depending on whether the entity is new.
     * IMPORTANT:
     * If this parameter is omitted, then the entity will be considered new if it lacks the `id` attribute.
     * This will produce incorrect results for String ID entities.
     * Therefore using this parameter is mandatory for String ID entities.
     *
     * @returns a promise that resolves to the update result returned by the REST API.
     */
    update(entityPatch: Partial<T>, commitMode?: CommitMode): Promise<any>;
    /**
     * Sends a request to the REST API to persist the changes made to the {@link item}.
     *
     * @param commitMode - see {@link update}
     *
     * @returns a promise that resolves to the update result returned by the REST API.
     */
    commit: (commitMode?: "create" | "edit" | undefined) => Promise<Partial<T>>;
    /**
     * Transforms the {@link item} into the format expected by Ant Design {@link https://3x.ant.design/components/form/ | Form} fields.
     *
     * @param properties - entity properties that should be included in the result.
     * @returns entity instance transformed into the format expected by Ant Design {@link https://3x.ant.design/components/form/ | Form} fields.
     */
    getFieldValues(properties: string[]): Partial<{
        [prop in keyof T]: any;
    }>;
}
export interface DataInstanceOptions {
    /**
     * Whether to call the {@link DataInstanceStore.load} method immediately after the
     * {@link DataInstanceStore} is constructed.
     */
    loadImmediately?: boolean;
    /**
     * See {@link DataInstanceStore.viewName}
     */
    view?: string;
    /**
     * See {@link DataInstanceStore.stringIdName}
     */
    stringIdName?: string;
}
export interface DataInstanceProps<E> extends DataInstanceOptions {
    entityName: string;
    children: (store: Partial<DataInstanceStore<E>>) => React.ReactNode;
}
/**
 * Initialization function that instantiates a {@link DataInstanceStore}.
 *
 * @typeparam T - entity type.
 *
 * @param entityName - name of the entity to be retrieved.
 * @param opts - {@link DataInstanceStore} configuration.
 */
export declare function instance<T>(entityName: string, opts: DataInstanceOptions): DataInstanceStore<T>;
export declare const withDataInstance: (entityName: string, opts?: DataInstanceOptions) => <T extends IReactComponent<any>>(target: T) => T & import("mobx-react").IWrappedComponent<unknown>;
export interface DataInstanceInjected<E> {
    dataInstance?: DataInstanceStore<E>;
}
export declare class Instance<E> extends React.Component<DataInstanceProps<E>> {
    store: DataInstanceStore<E>;
    constructor(props: DataInstanceProps<E>);
    render(): React.ReactNode;
    get childrenProps(): {
        item: (E & Partial<SerializedEntityProps> & WithId) | undefined;
        status: DataContainerStatus;
        load: (id: string) => void;
        commit: (commitMode?: "create" | "edit" | undefined) => Promise<Partial<E>>;
    };
}
/**
 * @deprecated To be removed from public API
 *
 * @param item
 */
export declare function stripTemporaryIds(item: Record<string, any>): Record<string, any>;
/**
 * Transforms the antd Form fields values into format expected by Instance item, which is generally the same as the format
 * expected by REST API, except that Instance item may have the following properties that are stripped before the commit:
 * - a temporary id created client-side
 * - read-only attributes
 *
 * @param formFields
 * @param entityName
 * @param metadata
 * @param stringIdName See {@link DataInstanceStore.stringIdName}
 */
export declare function formFieldsToInstanceItem<T>(formFields: Record<string, any>, entityName: string, metadata: MetaClassInfo[], stringIdName?: string): Record<string, any>;
/**
 * Transforms the provided `item` into the format expected by Ant Design {@link https://3x.ant.design/components/form/ | Form} fields.
 *
 * @typeparam T - entity type.
 *
 * @param item - entity instance to be transformed.
 * @param entityName
 * @param metadata - entities metadata.
 * @param displayedProperties - entity properties that should be included in the result. If not provided, all properties will be included.
 * @param stringIdName See {@link DataInstanceStore.stringIdName}
 */
export declare function instanceItemToFormFields<T>(item: Record<string, any> | undefined, entityName: string, metadata: MetaClassInfo[], displayedProperties?: string[], stringIdName?: string): Record<string, any>;
